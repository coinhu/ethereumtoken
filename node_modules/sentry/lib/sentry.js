// Generated by CoffeeScript 1.12.7
(function() {
  var _, exec, fileUtil, fs, path, watchFile;

  fileUtil = require('file');

  _ = require('underscore');

  fs = require('fs');

  exec = require('child_process').exec;

  path = require('path');

  this.watch = (function(_this) {
    return function(file, task, callback) {
      var files, i, len, results;
      if (_.isFunction(task)) {
        callback = task;
      }
      if (file.indexOf('/*') !== -1) {
        files = _this.findWildcards(file);
        results = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          results.push(watchFile(file, task, callback));
        }
        return results;
      } else {
        if (!path.existsSync(file)) {
          throw new Error("SENTRY: File '" + file + "' does not exist!");
        }
        return watchFile(file, task, callback);
      }
    };
  })(this);

  this.watchRegExp = function(root, regex, task, callback) {
    var file, files, i, len, results;
    if (_.isFunction(task)) {
      callback = task;
    }
    root = path.resolve(path.dirname(module.parent.filename), root);
    files = [];
    fileUtil.walkSync(root, function(rt, flds, fls) {
      var fl, flPath, i, len, results;
      results = [];
      for (i = 0, len = fls.length; i < len; i++) {
        fl = fls[i];
        flPath = rt + '/' + fl;
        if (flPath.match(regex)) {
          results.push(files.push(flPath));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    files;
    results = [];
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      results.push(watchFile(file, task, callback));
    }
    return results;
  };

  watchFile = function(file, task, callback) {
    return fs.watchFile(file, function(curr, prev) {
      if (curr.size === prev.size && curr.mtime.getTime() === prev.mtime.getTime()) {
        return;
      }
      if (_.isString(task)) {
        return exec(task, function(err, stdout, stderr) {
          console.log(stdout);
          if (err != null) {
            console.log(err);
          }
          if (callback != null) {
            return callback(err, stdout, stderr);
          }
        });
      } else {
        return callback(file);
      }
    });
  };

  this.findWildcards = function(file) {
    var ext, files, i, len, ref, root;
    files = [];
    if ((file != null) && file.indexOf('**/*') !== -1) {
      root = file.split('**/*')[0];
      ext = file.split('**/*')[1];
      fileUtil.walkSync(root, function(root, flds, fls) {
        var i, len, results;
        root = (root.charAt(root.length - 1) === '/' ? root : root + '/');
        results = [];
        for (i = 0, len = fls.length; i < len; i++) {
          file = fls[i];
          if ((file.match(new RegExp(ext + '$')) != null) && _.indexOf(files, root + file) === -1) {
            results.push(files.push(root + file));
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
    } else if ((file != null) && file.indexOf('/*') !== -1) {
      root = file.split('/*')[0];
      ext = file.split('/*')[1];
      ref = fs.readdirSync(root);
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        if (file.indexOf('.') !== -1 && (file.match(new RegExp(ext + '$')) != null) && _.indexOf(files, root + '/' + file) === -1) {
          files.push(root + '/' + file);
        }
      }
    }
    return files;
  };

}).call(this);
