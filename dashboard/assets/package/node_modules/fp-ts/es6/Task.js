import { pipeable } from './pipeable';
/**
 * @since 2.0.0
 */
export const URI = 'Task';
/**
 * @since 2.0.0
 */
export const never = () => new Promise(_ => undefined);
/**
 * @since 2.0.0
 */
export function getSemigroup(S) {
    return {
        concat: (x, y) => () => x().then(rx => y().then(ry => S.concat(rx, ry)))
    };
}
/**
 * @since 2.0.0
 */
export function getMonoid(M) {
    return {
        concat: getSemigroup(M).concat,
        empty: task.of(M.empty)
    };
}
/**
 * Note: uses `Promise.race` internally
 *
 * @since 2.0.0
 */
export function getRaceMonoid() {
    return {
        concat: (x, y) => () => Promise.race([x(), y()]),
        empty: never
    };
}
/**
 * @since 2.0.0
 */
export function delay(millis) {
    return ma => () => new Promise(resolve => {
        setTimeout(() => {
            // tslint:disable-next-line: no-floating-promises
            ma().then(resolve);
        }, millis);
    });
}
/**
 * @since 2.0.0
 */
export function fromIO(ma) {
    return () => Promise.resolve(ma());
}
const identity = (a) => a;
/**
 * @since 2.0.0
 */
export function of(a) {
    return () => Promise.resolve(a);
}
/**
 * @since 2.4.0
 */
export function fromIOK(f) {
    return (...a) => fromIO(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainIOK(f) {
    return chain(fromIOK(f));
}
/**
 * @since 2.0.0
 */
export const task = {
    URI,
    map: (ma, f) => () => ma().then(f),
    of,
    ap: (mab, ma) => () => Promise.all([mab(), ma()]).then(([f, a]) => f(a)),
    chain: (ma, f) => () => ma().then(a => f(a)()),
    fromIO,
    fromTask: identity
};
/**
 * Like `Task` but `ap` is sequential
 *
 * @since 2.0.0
 */
export const taskSeq = Object.assign(Object.assign({}, task), { ap: (mab, ma) => () => mab().then(f => ma().then(a => f(a))) });
const { ap, apFirst, apSecond, chain, chainFirst, flatten, map } = pipeable(task);
export { 
/**
 * @since 2.0.0
 */
ap, 
/**
 * @since 2.0.0
 */
apFirst, 
/**
 * @since 2.0.0
 */
apSecond, 
/**
 * @since 2.0.0
 */
chain, 
/**
 * @since 2.0.0
 */
chainFirst, 
/**
 * @since 2.0.0
 */
flatten, 
/**
 * @since 2.0.0
 */
map };
