/**
 * See [Getting started with fp-ts: Semigroup](https://gcanti.github.io/fp-ts/getting-started/Semigroup.html)
 *
 * @since 2.0.0
 */
import { max, min } from './Ord';
import { identity } from './function';
/**
 * @since 2.0.0
 */
export function fold(S) {
    return (a, as) => as.reduce(S.concat, a);
}
/**
 * @since 2.0.0
 */
export function getFirstSemigroup() {
    return { concat: identity };
}
/**
 * @since 2.0.0
 */
export function getLastSemigroup() {
    return { concat: (_, y) => y };
}
/**
 * Given a tuple of semigroups returns a semigroup for the tuple
 *
 * @example
 * import { getTupleSemigroup, semigroupString, semigroupSum, semigroupAll } from 'fp-ts/lib/Semigroup'
 *
 * const S1 = getTupleSemigroup(semigroupString, semigroupSum)
 * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])
 *
 * const S2 = getTupleSemigroup(semigroupString, semigroupSum, semigroupAll)
 * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])
 *
 * @since 2.0.0
 */
export function getTupleSemigroup(...semigroups) {
    return {
        concat: (x, y) => semigroups.map((s, i) => s.concat(x[i], y[i]))
    };
}
/**
 * @since 2.0.0
 */
export function getDualSemigroup(S) {
    return {
        concat: (x, y) => S.concat(y, x)
    };
}
/**
 * @since 2.0.0
 */
export function getFunctionSemigroup(S) {
    return () => ({
        concat: (f, g) => a => S.concat(f(a), g(a))
    });
}
/**
 * @since 2.0.0
 */
export function getStructSemigroup(semigroups) {
    return {
        concat: (x, y) => {
            const r = {};
            for (const key of Object.keys(semigroups)) {
                r[key] = semigroups[key].concat(x[key], y[key]);
            }
            return r;
        }
    };
}
/**
 * @since 2.0.0
 */
export function getMeetSemigroup(O) {
    return {
        concat: min(O)
    };
}
/**
 * @since 2.0.0
 */
export function getJoinSemigroup(O) {
    return {
        concat: max(O)
    };
}
/**
 * Returns a `Semigroup` instance for objects preserving their type
 *
 * @example
 * import { getObjectSemigroup } from 'fp-ts/lib/Semigroup'
 *
 * interface Person {
 *   name: string
 *   age: number
 * }
 *
 * const S = getObjectSemigroup<Person>()
 * assert.deepStrictEqual(S.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })
 *
 * @since 2.0.0
 */
export function getObjectSemigroup() {
    return {
        concat: (x, y) => Object.assign({}, x, y)
    };
}
/**
 * Boolean semigroup under conjunction
 * @since 2.0.0
 */
export const semigroupAll = {
    concat: (x, y) => x && y
};
/**
 * Boolean semigroup under disjunction
 * @since 2.0.0
 */
export const semigroupAny = {
    concat: (x, y) => x || y
};
/**
 * Number `Semigroup` under addition
 * @since 2.0.0
 */
export const semigroupSum = {
    concat: (x, y) => x + y
};
/**
 * Number `Semigroup` under multiplication
 * @since 2.0.0
 */
export const semigroupProduct = {
    concat: (x, y) => x * y
};
/**
 * @since 2.0.0
 */
export const semigroupString = {
    concat: (x, y) => x + y
};
/**
 * @since 2.0.0
 */
export const semigroupVoid = {
    concat: () => undefined
};
