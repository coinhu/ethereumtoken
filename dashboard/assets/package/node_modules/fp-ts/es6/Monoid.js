import { identity } from './function';
import { fold as foldSemigroup, getDualSemigroup, getFunctionSemigroup, getJoinSemigroup, getMeetSemigroup, semigroupAll, semigroupAny, semigroupProduct, semigroupString, semigroupSum, semigroupVoid, getStructSemigroup, getTupleSemigroup } from './Semigroup';
/**
 * Boolean monoid under conjunction
 * @since 2.0.0
 */
export const monoidAll = {
    concat: semigroupAll.concat,
    empty: true
};
/**
 * Boolean monoid under disjunction
 * @since 2.0.0
 */
export const monoidAny = {
    concat: semigroupAny.concat,
    empty: false
};
/**
 * Number monoid under addition
 * @since 2.0.0
 */
export const monoidSum = {
    concat: semigroupSum.concat,
    empty: 0
};
/**
 * Number monoid under multiplication
 * @since 2.0.0
 */
export const monoidProduct = {
    concat: semigroupProduct.concat,
    empty: 1
};
/**
 * @since 2.0.0
 */
export const monoidString = {
    concat: semigroupString.concat,
    empty: ''
};
/**
 * @since 2.0.0
 */
export const monoidVoid = {
    concat: semigroupVoid.concat,
    empty: undefined
};
/**
 * @since 2.0.0
 */
export function fold(M) {
    const foldSemigroupM = foldSemigroup(M);
    return as => foldSemigroupM(M.empty, as);
}
/**
 * Given a tuple of monoids returns a monoid for the tuple
 *
 * @example
 * import { getTupleMonoid, monoidString, monoidSum, monoidAll } from 'fp-ts/lib/Monoid'
 *
 * const M1 = getTupleMonoid(monoidString, monoidSum)
 * assert.deepStrictEqual(M1.concat(['a', 1], ['b', 2]), ['ab', 3])
 *
 * const M2 = getTupleMonoid(monoidString, monoidSum, monoidAll)
 * assert.deepStrictEqual(M2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])
 *
 * @since 2.0.0
 */
export function getTupleMonoid(...monoids) {
    return {
        concat: getTupleSemigroup(...monoids).concat,
        empty: monoids.map(m => m.empty)
    };
}
/**
 * @since 2.0.0
 */
export function getDualMonoid(M) {
    return {
        concat: getDualSemigroup(M).concat,
        empty: M.empty
    };
}
/**
 * @since 2.0.0
 */
export function getFunctionMonoid(M) {
    return () => ({
        concat: getFunctionSemigroup(M)().concat,
        empty: () => M.empty
    });
}
/**
 * @since 2.0.0
 */
export function getEndomorphismMonoid() {
    return {
        concat: (x, y) => a => x(y(a)),
        empty: identity
    };
}
/**
 * @since 2.0.0
 */
export function getStructMonoid(monoids) {
    const empty = {};
    for (const key of Object.keys(monoids)) {
        empty[key] = monoids[key].empty;
    }
    return {
        concat: getStructSemigroup(monoids).concat,
        empty
    };
}
/**
 * @since 2.0.0
 */
export function getMeetMonoid(B) {
    return {
        concat: getMeetSemigroup(B).concat,
        empty: B.top
    };
}
/**
 * @since 2.0.0
 */
export function getJoinMonoid(B) {
    return {
        concat: getJoinSemigroup(B).concat,
        empty: B.bottom
    };
}
