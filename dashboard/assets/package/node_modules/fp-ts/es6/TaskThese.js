import { pipeable } from './pipeable';
import { getSemigroup as getTaskSemigroup, task } from './Task';
import * as TH from './These';
import { getTheseM } from './TheseT';
const T = getTheseM(task);
/**
 * @since 2.4.0
 */
export const URI = 'TaskThese';
/**
 * @since 2.4.0
 */
export const left = T.left;
/**
 * @since 2.4.0
 */
export const right = T.right;
/**
 * @since 2.4.0
 */
export const both = T.both;
/**
 * @since 2.4.0
 */
export function rightIO(ma) {
    return rightTask(task.fromIO(ma));
}
/**
 * @since 2.4.0
 */
export function leftIO(me) {
    return leftTask(task.fromIO(me));
}
/**
 * @since 2.4.0
 */
export const leftTask = T.leftM;
/**
 * @since 2.4.0
 */
export const rightTask = T.rightM;
/**
 * @since 2.4.0
 */
export const fromIOEither = task.fromIO;
/**
 * @since 2.4.0
 */
export function fold(onLeft, onRight, onBoth) {
    return fa => T.fold(fa, onLeft, onRight, onBoth);
}
/**
 * @since 2.4.0
 */
export const swap = T.swap;
/**
 * @since 2.4.0
 */
export function getSemigroup(SE, SA) {
    return getTaskSemigroup(TH.getSemigroup(SE, SA));
}
/**
 * @since 2.4.0
 */
export function getMonad(S) {
    return Object.assign(Object.assign({ URI }, T.getMonad(S)), { fromIO: rightIO, fromTask: rightTask });
}
/**
 * @since 2.4.0
 */
export function toTuple(e, a) {
    return fa => T.toTuple(fa, e, a);
}
/**
 * @since 2.4.0
 */
export const taskThese = {
    URI,
    map: T.map,
    bimap: T.bimap,
    mapLeft: T.mapLeft
};
const { bimap, map, mapLeft } = pipeable(taskThese);
export { 
/**
 * @since 2.4.0
 */
bimap, 
/**
 * @since 2.4.0
 */
map, 
/**
 * @since 2.4.0
 */
mapLeft };
