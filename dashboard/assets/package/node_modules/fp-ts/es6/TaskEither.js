import * as E from './Either';
import { getEitherM } from './EitherT';
import { getFilterableComposition } from './Filterable';
import { pipeable } from './pipeable';
import { getSemigroup as getTaskSemigroup, task } from './Task';
import { getValidationM } from './ValidationT';
const T = getEitherM(task);
/**
 * @since 2.0.0
 */
export const URI = 'TaskEither';
/**
 * @since 2.0.0
 */
export const left = T.left;
/**
 * @since 2.0.0
 */
export const right = T.of;
/**
 * @since 2.0.0
 */
export function rightIO(ma) {
    return rightTask(task.fromIO(ma));
}
/**
 * @since 2.0.0
 */
export function leftIO(me) {
    return leftTask(task.fromIO(me));
}
/**
 * @since 2.0.0
 */
export const rightTask = T.rightM;
/**
 * @since 2.0.0
 */
export const leftTask = T.leftM;
/**
 * @since 2.0.0
 */
export const fromIOEither = task.fromIO;
/**
 * @since 2.0.0
 */
export function fold(onLeft, onRight) {
    return ma => T.fold(ma, onLeft, onRight);
}
/**
 * @since 2.0.0
 */
export function getOrElse(onLeft) {
    return ma => T.getOrElse(ma, onLeft);
}
/**
 * @since 2.0.0
 */
export function orElse(onLeft) {
    return ma => T.orElse(ma, onLeft);
}
/**
 * @since 2.0.0
 */
export const swap = T.swap;
/**
 * @since 2.0.0
 */
export function getSemigroup(S) {
    return getTaskSemigroup(E.getSemigroup(S));
}
/**
 * @since 2.0.0
 */
export function getApplySemigroup(S) {
    return getTaskSemigroup(E.getApplySemigroup(S));
}
/**
 * @since 2.0.0
 */
export function getApplyMonoid(M) {
    return {
        concat: getApplySemigroup(M).concat,
        empty: right(M.empty)
    };
}
/**
 * Transforms a `Promise` that may reject to a `Promise` that never rejects and returns an `Either` instead.
 *
 * Note: `f` should never `throw` errors, they are not caught.
 *
 * @example
 * import { left, right } from 'fp-ts/lib/Either'
 * import { tryCatch } from 'fp-ts/lib/TaskEither'
 *
 * tryCatch(() => Promise.resolve(1), String)().then(result => {
 *   assert.deepStrictEqual(result, right(1))
 * })
 * tryCatch(() => Promise.reject('error'), String)().then(result => {
 *   assert.deepStrictEqual(result, left('error'))
 * })
 *
 * @since 2.0.0
 */
export function tryCatch(f, onRejected) {
    return () => f().then(E.right, reason => E.left(onRejected(reason)));
}
/**
 * Make sure that a resource is cleaned up in the event of an exception (*). The release action is called regardless of
 * whether the body action throws (*) or returns.
 *
 * (*) i.e. returns a `Left`
 *
 * @since 2.0.0
 */
export function bracket(acquire, use, release) {
    return T.chain(acquire, a => T.chain(task.map(use(a), E.right), e => T.chain(release(a, e), () => (E.isLeft(e) ? T.left(e.left) : T.of(e.right)))));
}
export function taskify(f) {
    return function () {
        const args = Array.prototype.slice.call(arguments);
        return () => new Promise(resolve => {
            const cbResolver = (e, r) => (e != null ? resolve(E.left(e)) : resolve(E.right(r)));
            f.apply(null, args.concat(cbResolver));
        });
    };
}
/**
 * @since 2.0.0
 */
export function getTaskValidation(S) {
    const T = getValidationM(S, task);
    return Object.assign({ URI, _E: undefined, throwError: taskEither.throwError, bimap: taskEither.bimap, mapLeft: taskEither.mapLeft, fromIO: taskEither.fromIO, fromTask: taskEither.fromTask }, T);
}
/**
 * @since 2.1.0
 */
export function getFilterable(M) {
    const F = E.getWitherable(M);
    return Object.assign({ URI, _E: undefined }, getFilterableComposition(task, F));
}
/**
 * @since 2.4.0
 */
export function fromEitherK(f) {
    return (...a) => fromEither(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainEitherK(f) {
    return chain(fromEitherK(f));
}
/**
 * @since 2.4.0
 */
export function fromIOEitherK(f) {
    return (...a) => fromIOEither(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainIOEitherK(f) {
    return chain(fromIOEitherK(f));
}
/**
 * @since 2.0.0
 */
export const taskEither = {
    URI,
    bimap: T.bimap,
    mapLeft: T.mapLeft,
    map: T.map,
    of: T.of,
    ap: T.ap,
    chain: T.chain,
    alt: T.alt,
    fromIO: rightIO,
    fromTask: rightTask,
    throwError: left
};
/**
 * Like `TaskEither` but `ap` is sequential
 *
 * @since 2.0.0
 */
export const taskEitherSeq = Object.assign(Object.assign({}, taskEither), { ap: (mab, ma) => T.chain(mab, f => T.map(ma, f)) });
const { alt, ap, apFirst, apSecond, bimap, chain, chainFirst, flatten, map, mapLeft, fromEither, fromOption, fromPredicate, filterOrElse } = pipeable(taskEither);
export { 
/**
 * @since 2.0.0
 */
alt, 
/**
 * @since 2.0.0
 */
ap, 
/**
 * @since 2.0.0
 */
apFirst, 
/**
 * @since 2.0.0
 */
apSecond, 
/**
 * @since 2.0.0
 */
bimap, 
/**
 * @since 2.0.0
 */
chain, 
/**
 * @since 2.0.0
 */
chainFirst, 
/**
 * @since 2.0.0
 */
flatten, 
/**
 * @since 2.0.0
 */
map, 
/**
 * @since 2.0.0
 */
mapLeft, 
/**
 * @since 2.0.0
 */
fromEither, 
/**
 * @since 2.0.0
 */
fromOption, 
/**
 * @since 2.0.0
 */
fromPredicate, 
/**
 * @since 2.0.0
 */
filterOrElse };
