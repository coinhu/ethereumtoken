import { constant } from './function';
export function getFoldableComposition(F, G) {
    return {
        reduce: (fga, b, f) => F.reduce(fga, b, (b, ga) => G.reduce(ga, b, f)),
        foldMap: M => {
            const foldMapF = F.foldMap(M);
            const foldMapG = G.foldMap(M);
            return (fa, f) => foldMapF(fa, ga => foldMapG(ga, f));
        },
        reduceRight: (fa, b, f) => F.reduceRight(fa, b, (ga, b) => G.reduceRight(ga, b, f))
    };
}
export function foldM(M, F) {
    return (fa, b, f) => F.reduce(fa, M.of(b), (mb, a) => M.chain(mb, b => f(b, a)));
}
export function intercalate(M, F) {
    return (sep, fm) => {
        const go = ({ init, acc }, x) => init ? { init: false, acc: x } : { init: false, acc: M.concat(M.concat(acc, sep), x) };
        return F.reduce(fm, { init: true, acc: M.empty }, go).acc;
    };
}
export function traverse_(M, F) {
    const applyFirst = (mu, mb) => M.ap(M.map(mu, constant), mb);
    const mu = M.of(undefined);
    return (fa, f) => F.reduce(fa, mu, (mu, a) => applyFirst(mu, f(a)));
}
