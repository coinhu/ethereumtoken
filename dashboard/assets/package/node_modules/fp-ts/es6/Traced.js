import { pipeable } from './pipeable';
/**
 * @since 2.0.0
 */
export const URI = 'Traced';
/**
 * Extracts a value at a relative position which depends on the current value.
 *
 * @since 2.0.0
 */
export function tracks(M, f) {
    return wa => wa(f(wa(M.empty)));
}
/**
 * Get the current position
 *
 * @since 2.0.0
 */
export function listen(wa) {
    return e => [wa(e), e];
}
/**
 * Get a value which depends on the current position
 *
 * @since 2.0.0
 */
export function listens(f) {
    return wa => e => [wa(e), f(e)];
}
/**
 * Apply a function to the current position
 *
 * @since 2.0.0
 */
export function censor(f) {
    return wa => e => wa(f(e));
}
/**
 * @since 2.0.0
 */
export function getComonad(monoid) {
    function extend(wa, f) {
        return p1 => f(p2 => wa(monoid.concat(p1, p2)));
    }
    function extract(wa) {
        return wa(monoid.empty);
    }
    return {
        URI,
        _E: undefined,
        map: traced.map,
        extend,
        extract
    };
}
/**
 * @since 2.0.0
 */
export const traced = {
    URI,
    map: (wa, f) => p => f(wa(p))
};
const { map } = pipeable(traced);
export { 
/**
 * @since 2.0.0
 */
map };
