/**
 * @since 2.0.0
 */
import { getApplicativeComposition } from './Applicative';
import { fold, none, option, some } from './Option';
export function getOptionM(M) {
    const A = getApplicativeComposition(M, option);
    const fnone = M.of(none);
    return Object.assign(Object.assign({}, A), { chain: (ma, f) => M.chain(ma, fold(() => fnone, f)), alt: (fx, fy) => M.chain(fx, fold(fy, a => M.of(some(a)))), fold: (ma, onNone, onSome) => M.chain(ma, fold(onNone, onSome)), getOrElse: (ma, onNone) => M.chain(ma, fold(onNone, M.of)), fromM: ma => M.map(ma, some), none: () => fnone });
}
