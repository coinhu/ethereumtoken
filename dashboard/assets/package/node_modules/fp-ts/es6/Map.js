import { isLeft } from './Either';
import { fromEquals } from './Eq';
import { isNone, isSome, none, option, some } from './Option';
import { pipeable } from './pipeable';
/**
 * @since 2.0.0
 */
export const URI = 'Map';
/**
 * @since 2.0.0
 */
export function getShow(SK, SA) {
    return {
        show: m => {
            let elements = '';
            m.forEach((a, k) => {
                elements += `[${SK.show(k)}, ${SA.show(a)}], `;
            });
            if (elements !== '') {
                elements = elements.substring(0, elements.length - 2);
            }
            return `new Map([${elements}])`;
        }
    };
}
/**
 * Calculate the number of key/value pairs in a map
 *
 * @since 2.0.0
 */
export function size(d) {
    return d.size;
}
/**
 * Test whether or not a map is empty
 *
 * @since 2.0.0
 */
export function isEmpty(d) {
    return d.size === 0;
}
/**
 * Test whether or not a key exists in a map
 *
 * @since 2.0.0
 */
export function member(E) {
    const lookupE = lookup(E);
    return (k, m) => isSome(lookupE(k, m));
}
/**
 * Test whether or not a value is a member of a map
 *
 * @since 2.0.0
 */
export function elem(E) {
    return (a, m) => {
        const values = m.values();
        let e;
        // tslint:disable-next-line: strict-boolean-expressions
        while (!(e = values.next()).done) {
            const v = e.value;
            if (E.equals(a, v)) {
                return true;
            }
        }
        return false;
    };
}
/**
 * Get a sorted array of the keys contained in a map
 *
 * @since 2.0.0
 */
export function keys(O) {
    return m => Array.from(m.keys()).sort(O.compare);
}
/**
 * Get a sorted array of the values contained in a map
 *
 * @since 2.0.0
 */
export function values(O) {
    return m => Array.from(m.values()).sort(O.compare);
}
/**
 * @since 2.0.0
 */
export function collect(O) {
    const keysO = keys(O);
    return (f) => (m) => {
        const out = [];
        const ks = keysO(m);
        for (const key of ks) {
            out.push(f(key, m.get(key)));
        }
        return out;
    };
}
/**
 * Get a sorted of the key/value pairs contained in a map
 *
 * @since 2.0.0
 */
export function toArray(O) {
    return collect(O)((k, a) => [k, a]);
}
export function toUnfoldable(O, U) {
    const toArrayO = toArray(O);
    return d => {
        const arr = toArrayO(d);
        const len = arr.length;
        return U.unfold(0, b => (b < len ? some([arr[b], b + 1]) : none));
    };
}
/**
 * Insert or replace a key/value pair in a map
 *
 * @since 2.0.0
 */
export function insertAt(E) {
    const lookupWithKeyE = lookupWithKey(E);
    return (k, a) => m => {
        const found = lookupWithKeyE(k, m);
        if (isNone(found)) {
            const r = new Map(m);
            r.set(k, a);
            return r;
        }
        else if (found.value[1] !== a) {
            const r = new Map(m);
            r.set(found.value[0], a);
            return r;
        }
        return m;
    };
}
/**
 * Delete a key and value from a map
 *
 * @since 2.0.0
 */
export function deleteAt(E) {
    const lookupWithKeyE = lookupWithKey(E);
    return k => m => {
        const found = lookupWithKeyE(k, m);
        if (isSome(found)) {
            const r = new Map(m);
            r.delete(found.value[0]);
            return r;
        }
        return m;
    };
}
/**
 * @since 2.0.0
 */
export function updateAt(E) {
    const lookupWithKeyE = lookupWithKey(E);
    return (k, a) => m => {
        const found = lookupWithKeyE(k, m);
        if (isNone(found)) {
            return none;
        }
        const r = new Map(m);
        r.set(found.value[0], a);
        return some(r);
    };
}
/**
 * @since 2.0.0
 */
export function modifyAt(E) {
    const lookupWithKeyE = lookupWithKey(E);
    return (k, f) => m => {
        const found = lookupWithKeyE(k, m);
        if (isNone(found)) {
            return none;
        }
        const r = new Map(m);
        r.set(found.value[0], f(found.value[1]));
        return some(r);
    };
}
/**
 * Delete a key and value from a map, returning the value as well as the subsequent map
 *
 * @since 2.0.0
 */
export function pop(E) {
    const lookupE = lookup(E);
    const deleteAtE = deleteAt(E);
    return k => {
        const deleteAtEk = deleteAtE(k);
        return m => option.map(lookupE(k, m), a => [a, deleteAtEk(m)]);
    };
}
/**
 * Lookup the value for a key in a `Map`.
 * If the result is a `Some`, the existing key is also returned.
 *
 * @since 2.0.0
 */
export function lookupWithKey(E) {
    return (k, m) => {
        const entries = m.entries();
        let e;
        // tslint:disable-next-line: strict-boolean-expressions
        while (!(e = entries.next()).done) {
            const [ka, a] = e.value;
            if (E.equals(ka, k)) {
                return some([ka, a]);
            }
        }
        return none;
    };
}
/**
 * Lookup the value for a key in a `Map`.
 *
 * @since 2.0.0
 */
export function lookup(E) {
    const lookupWithKeyE = lookupWithKey(E);
    return (k, m) => option.map(lookupWithKeyE(k, m), ([_, a]) => a);
}
/**
 * Test whether or not one Map contains all of the keys and values contained in another Map
 *
 * @since 2.0.0
 */
export function isSubmap(SK, SA) {
    const lookupWithKeyS = lookupWithKey(SK);
    return (d1, d2) => {
        const entries = d1.entries();
        let e;
        // tslint:disable-next-line: strict-boolean-expressions
        while (!(e = entries.next()).done) {
            const [k, a] = e.value;
            const d2OptA = lookupWithKeyS(k, d2);
            if (isNone(d2OptA) || !SK.equals(k, d2OptA.value[0]) || !SA.equals(a, d2OptA.value[1])) {
                return false;
            }
        }
        return true;
    };
}
/**
 * @since 2.0.0
 */
export const empty = new Map();
/**
 * @since 2.0.0
 */
export function getEq(SK, SA) {
    const isSubmap_ = isSubmap(SK, SA);
    return fromEquals((x, y) => isSubmap_(x, y) && isSubmap_(y, x));
}
/**
 * Gets `Monoid` instance for Maps given `Semigroup` instance for their values
 *
 * @since 2.0.0
 */
export function getMonoid(SK, SA) {
    const lookupWithKeyS = lookupWithKey(SK);
    return {
        concat: (mx, my) => {
            if (mx === empty) {
                return my;
            }
            if (my === empty) {
                return mx;
            }
            const r = new Map(mx);
            const entries = my.entries();
            let e;
            // tslint:disable-next-line: strict-boolean-expressions
            while (!(e = entries.next()).done) {
                const [k, a] = e.value;
                const mxOptA = lookupWithKeyS(k, mx);
                if (isSome(mxOptA)) {
                    r.set(mxOptA.value[0], SA.concat(mxOptA.value[1], a));
                }
                else {
                    r.set(k, a);
                }
            }
            return r;
        },
        empty
    };
}
/**
 * Create a map with one key/value pair
 *
 * @since 2.0.0
 */
export function singleton(k, a) {
    return new Map([[k, a]]);
}
export function fromFoldable(E, M, F) {
    return (fka) => {
        const lookupWithKeyE = lookupWithKey(E);
        return F.reduce(fka, new Map(), (b, [k, a]) => {
            const bOpt = lookupWithKeyE(k, b);
            if (isSome(bOpt)) {
                b.set(bOpt.value[0], M.concat(bOpt.value[1], a));
            }
            else {
                b.set(k, a);
            }
            return b;
        });
    };
}
const _mapWithIndex = (fa, f) => {
    const m = new Map();
    const entries = fa.entries();
    let e;
    // tslint:disable-next-line: strict-boolean-expressions
    while (!(e = entries.next()).done) {
        const [key, a] = e.value;
        m.set(key, f(key, a));
    }
    return m;
};
const _partitionMapWithIndex = (fa, f) => {
    const left = new Map();
    const right = new Map();
    const entries = fa.entries();
    let e;
    // tslint:disable-next-line: strict-boolean-expressions
    while (!(e = entries.next()).done) {
        const [k, a] = e.value;
        const ei = f(k, a);
        if (isLeft(ei)) {
            left.set(k, ei.left);
        }
        else {
            right.set(k, ei.right);
        }
    }
    return {
        left,
        right
    };
};
const _partitionWithIndex = (fa, p) => {
    const left = new Map();
    const right = new Map();
    const entries = fa.entries();
    let e;
    // tslint:disable-next-line: strict-boolean-expressions
    while (!(e = entries.next()).done) {
        const [k, a] = e.value;
        if (p(k, a)) {
            right.set(k, a);
        }
        else {
            left.set(k, a);
        }
    }
    return {
        left,
        right
    };
};
const _filterMapWithIndex = (fa, f) => {
    const m = new Map();
    const entries = fa.entries();
    let e;
    // tslint:disable-next-line: strict-boolean-expressions
    while (!(e = entries.next()).done) {
        const [k, a] = e.value;
        const o = f(k, a);
        if (isSome(o)) {
            m.set(k, o.value);
        }
    }
    return m;
};
const _filterWithIndex = (fa, p) => {
    const m = new Map();
    const entries = fa.entries();
    let e;
    // tslint:disable-next-line: strict-boolean-expressions
    while (!(e = entries.next()).done) {
        const [k, a] = e.value;
        if (p(k, a)) {
            m.set(k, a);
        }
    }
    return m;
};
/**
 * @since 2.0.0
 */
export function getFilterableWithIndex() {
    return Object.assign(Object.assign({}, map_), { _E: undefined, mapWithIndex: _mapWithIndex, partitionMapWithIndex: _partitionMapWithIndex, partitionWithIndex: _partitionWithIndex, filterMapWithIndex: _filterMapWithIndex, filterWithIndex: _filterWithIndex });
}
/**
 * @since 2.0.0
 */
export function getWitherable(O) {
    const keysO = keys(O);
    const reduceWithIndex = (fa, b, f) => {
        let out = b;
        const ks = keysO(fa);
        const len = ks.length;
        for (let i = 0; i < len; i++) {
            const k = ks[i];
            out = f(k, out, fa.get(k));
        }
        return out;
    };
    const foldMapWithIndex = (M) => (fa, f) => {
        let out = M.empty;
        const ks = keysO(fa);
        const len = ks.length;
        for (let i = 0; i < len; i++) {
            const k = ks[i];
            out = M.concat(out, f(k, fa.get(k)));
        }
        return out;
    };
    const reduceRightWithIndex = (fa, b, f) => {
        let out = b;
        const ks = keysO(fa);
        const len = ks.length;
        for (let i = len - 1; i >= 0; i--) {
            const k = ks[i];
            out = f(k, fa.get(k), out);
        }
        return out;
    };
    const traverseWithIndex = (F) => {
        return (ta, f) => {
            let fm = F.of(empty);
            const entries = ta.entries();
            let e;
            // tslint:disable-next-line: strict-boolean-expressions
            while (!(e = entries.next()).done) {
                const [key, a] = e.value;
                fm = F.ap(F.map(fm, m => (b) => new Map(m).set(key, b)), f(key, a));
            }
            return fm;
        };
    };
    const traverse = (F) => {
        const traverseWithIndexF = traverseWithIndex(F);
        return (ta, f) => traverseWithIndexF(ta, (_, a) => f(a));
    };
    const sequence = (F) => {
        const traverseWithIndexF = traverseWithIndex(F);
        return ta => traverseWithIndexF(ta, (_, a) => a);
    };
    return Object.assign(Object.assign({}, map_), { _E: undefined, reduce: (fa, b, f) => reduceWithIndex(fa, b, (_, b, a) => f(b, a)), foldMap: M => {
            const foldMapWithIndexM = foldMapWithIndex(M);
            return (fa, f) => foldMapWithIndexM(fa, (_, a) => f(a));
        }, reduceRight: (fa, b, f) => reduceRightWithIndex(fa, b, (_, a, b) => f(a, b)), traverse,
        sequence, mapWithIndex: _mapWithIndex, reduceWithIndex,
        foldMapWithIndex,
        reduceRightWithIndex,
        traverseWithIndex, wilt: (F) => {
            const traverseF = traverse(F);
            return (wa, f) => F.map(traverseF(wa, f), map_.separate);
        }, wither: (F) => {
            const traverseF = traverse(F);
            return (wa, f) => F.map(traverseF(wa, f), map_.compact);
        } });
}
/**
 * @since 2.0.0
 */
export const map_ = {
    URI,
    map: (fa, f) => _mapWithIndex(fa, (_, a) => f(a)),
    compact: (fa) => {
        const m = new Map();
        const entries = fa.entries();
        let e;
        // tslint:disable-next-line: strict-boolean-expressions
        while (!(e = entries.next()).done) {
            const [k, oa] = e.value;
            if (isSome(oa)) {
                m.set(k, oa.value);
            }
        }
        return m;
    },
    separate: (fa) => {
        const left = new Map();
        const right = new Map();
        const entries = fa.entries();
        let e;
        // tslint:disable-next-line: strict-boolean-expressions
        while (!(e = entries.next()).done) {
            const [k, ei] = e.value;
            if (isLeft(ei)) {
                left.set(k, ei.left);
            }
            else {
                right.set(k, ei.right);
            }
        }
        return {
            left,
            right
        };
    },
    filter: (fa, p) => _filterWithIndex(fa, (_, a) => p(a)),
    filterMap: (fa, f) => _filterMapWithIndex(fa, (_, a) => f(a)),
    partition: (fa, predicate) => _partitionWithIndex(fa, (_, a) => predicate(a)),
    partitionMap: (fa, f) => _partitionMapWithIndex(fa, (_, a) => f(a))
};
const { filter, filterMap, map, partition, partitionMap, compact, separate } = pipeable(map_);
export { 
/**
 * @since 2.0.0
 */
filter, 
/**
 * @since 2.0.0
 */
filterMap, 
/**
 * @since 2.0.0
 */
map, 
/**
 * @since 2.0.0
 */
partition, 
/**
 * @since 2.0.0
 */
partitionMap, 
/**
 * @since 2.0.0
 */
compact, 
/**
 * @since 2.0.0
 */
separate };
