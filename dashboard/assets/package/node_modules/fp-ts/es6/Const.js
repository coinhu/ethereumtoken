import { unsafeCoerce, identity } from './function';
import { pipeable } from './pipeable';
/**
 * @since 2.0.0
 */
export const URI = 'Const';
/**
 * @since 2.0.0
 */
export const make = unsafeCoerce;
/**
 * @since 2.0.0
 */
export function getShow(S) {
    return {
        show: c => `make(${S.show(c)})`
    };
}
/**
 * @since 2.0.0
 */
export const getEq = identity;
/**
 * @since 2.0.0
 */
export function getApply(S) {
    return {
        URI,
        _E: undefined,
        map: const_.map,
        ap: (fab, fa) => make(S.concat(fab, fa))
    };
}
/**
 * @since 2.0.0
 */
export function getApplicative(M) {
    return Object.assign(Object.assign({}, getApply(M)), { of: () => make(M.empty) });
}
/**
 * @since 2.0.0
 */
export const const_ = {
    URI,
    map: unsafeCoerce,
    contramap: unsafeCoerce
};
const { contramap, map } = pipeable(const_);
export { 
/**
 * @since 2.0.0
 */
contramap, 
/**
 * @since 2.0.0
 */
map };
