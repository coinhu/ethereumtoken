/**
 * @since 2.0.0
 */
import { getApplicativeComposition } from './Applicative';
import { either, fold, isLeft, left, right, swap } from './Either';
export function getEitherM(M) {
    const A = getApplicativeComposition(M, either);
    return Object.assign(Object.assign({}, A), { chain: (ma, f) => M.chain(ma, e => (isLeft(e) ? M.of(left(e.left)) : f(e.right))), alt: (fx, f) => M.chain(fx, e => (isLeft(e) ? f() : A.of(e.right))), bimap: (ma, f, g) => M.map(ma, e => either.bimap(e, f, g)), mapLeft: (ma, f) => M.map(ma, e => either.mapLeft(e, f)), fold: (ma, onLeft, onRight) => M.chain(ma, fold(onLeft, onRight)), getOrElse: (ma, onLeft) => M.chain(ma, fold(onLeft, M.of)), orElse: (ma, f) => M.chain(ma, fold(f, a => A.of(a))), swap: ma => M.map(ma, swap), rightM: ma => M.map(ma, right), leftM: ml => M.map(ml, left), left: e => M.of(left(e)) });
}
