import * as E from './Either';
import { getEitherM } from './EitherT';
import { pipeable } from './pipeable';
import { getSemigroup as getReaderSemigroup, reader } from './Reader';
import { getValidationM } from './ValidationT';
const T = getEitherM(reader);
/**
 * @since 2.0.0
 */
export const URI = 'ReaderEither';
/**
 * @since 2.0.0
 */
export const left = T.left;
/**
 * @since 2.0.0
 */
export const right = T.of;
/**
 * @since 2.0.0
 */
export const rightReader = T.rightM;
/**
 * @since 2.0.0
 */
export const leftReader = T.leftM;
/**
 * @since 2.0.0
 */
export function fold(onLeft, onRight) {
    return ma => T.fold(ma, onLeft, onRight);
}
/**
 * @since 2.0.0
 */
export function getOrElse(onLeft) {
    return ma => T.getOrElse(ma, onLeft);
}
/**
 * @since 2.0.0
 */
export function orElse(onLeft) {
    return ma => T.orElse(ma, onLeft);
}
/**
 * @since 2.0.0
 */
export const swap = T.swap;
/**
 * @since 2.0.0
 */
export function getSemigroup(S) {
    return getReaderSemigroup(E.getSemigroup(S));
}
/**
 * @since 2.0.0
 */
export function getApplySemigroup(S) {
    return getReaderSemigroup(E.getApplySemigroup(S));
}
/**
 * @since 2.0.0
 */
export function getApplyMonoid(M) {
    return {
        concat: getApplySemigroup(M).concat,
        empty: right(M.empty)
    };
}
/**
 * @since 2.0.0
 */
export function ask() {
    return E.right;
}
/**
 * @since 2.0.0
 */
export function asks(f) {
    return r => E.right(f(r));
}
/**
 * @since 2.0.0
 */
export function local(f) {
    return ma => q => ma(f(q));
}
/**
 * @since 2.3.0
 */
export function getReaderValidation(S) {
    const T = getValidationM(S, reader);
    return Object.assign({ URI, _E: undefined, throwError: readerEither.throwError, bimap: readerEither.bimap, mapLeft: readerEither.mapLeft }, T);
}
/**
 * @since 2.4.0
 */
export function fromEitherK(f) {
    return (...a) => fromEither(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainEitherK(f) {
    return chain(fromEitherK(f));
}
/**
 * @since 2.0.0
 */
export const readerEither = {
    URI,
    bimap: T.bimap,
    mapLeft: T.mapLeft,
    map: T.map,
    of: right,
    ap: T.ap,
    chain: T.chain,
    alt: T.alt,
    throwError: left
};
const { alt, ap, apFirst, apSecond, bimap, chain, chainFirst, flatten, map, mapLeft, fromEither, fromOption, fromPredicate, filterOrElse } = pipeable(readerEither);
export { 
/**
 * @since 2.0.0
 */
alt, 
/**
 * @since 2.0.0
 */
ap, 
/**
 * @since 2.0.0
 */
apFirst, 
/**
 * @since 2.0.0
 */
apSecond, 
/**
 * @since 2.0.0
 */
bimap, 
/**
 * @since 2.0.0
 */
chain, 
/**
 * @since 2.0.0
 */
chainFirst, 
/**
 * @since 2.0.0
 */
flatten, 
/**
 * @since 2.0.0
 */
map, 
/**
 * @since 2.0.0
 */
mapLeft, 
/**
 * @since 2.0.0
 */
fromEither, 
/**
 * @since 2.0.0
 */
fromOption, 
/**
 * @since 2.0.0
 */
fromPredicate, 
/**
 * @since 2.0.0
 */
filterOrElse };
