/**
 * @since 2.0.0
 */
import { getApplicativeComposition } from './Applicative';
import { getValidation, isLeft, isRight, left } from './Either';
export function getValidationM(S, M) {
    const A = getApplicativeComposition(M, getValidation(S));
    return Object.assign(Object.assign({}, A), { chain: (ma, f) => M.chain(ma, e => (isLeft(e) ? M.of(left(e.left)) : f(e.right))), alt: (fx, f) => M.chain(fx, e1 => isRight(e1) ? A.of(e1.right) : M.map(f(), e2 => (isLeft(e2) ? left(S.concat(e1.left, e2.left)) : e2))) });
}
