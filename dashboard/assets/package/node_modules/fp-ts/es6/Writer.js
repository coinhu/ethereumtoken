import { identity } from './Identity';
import { pipeable } from './pipeable';
import { getWriterM } from './WriterT';
const T = getWriterM(identity);
/**
 * @since 2.0.0
 */
export const URI = 'Writer';
/**
 * @since 2.0.0
 */
export const evalWriter = T.evalWriter;
/**
 * @since 2.0.0
 */
export const execWriter = T.execWriter;
/**
 * Appends a value to the accumulator
 *
 * @since 2.0.0
 */
export const tell = T.tell;
/**
 * Modifies the result to include the changes to the accumulator
 *
 * @since 2.0.0
 */
export const listen = T.listen;
/**
 * Applies the returned function to the accumulator
 *
 * @since 2.0.0
 */
export const pass = T.pass;
/**
 * Projects a value from modifications made to the accumulator during an action
 *
 * @since 2.0.0
 */
export function listens(f) {
    return fa => T.listens(fa, f);
}
/**
 * Modify the final accumulator value by applying a function
 *
 * @since 2.0.0
 */
export function censor(f) {
    return fa => T.censor(fa, f);
}
/**
 * @since 2.0.0
 */
export function getMonad(M) {
    return Object.assign({ URI }, T.getMonad(M));
}
/**
 * @since 2.0.0
 */
export const writer = {
    URI,
    map: T.map
};
const { map } = pipeable(writer);
export { 
/**
 * @since 2.0.0
 */
map };
