import { getStateM } from './StateT';
import { identity } from './Identity';
import { pipeable } from './pipeable';
const T = getStateM(identity);
/**
 * @since 2.0.0
 */
export const URI = 'State';
/**
 * Run a computation in the `State` monad, discarding the final state
 *
 * @since 2.0.0
 */
export const evalState = T.evalState;
/**
 * Run a computation in the `State` monad discarding the result
 *
 * @since 2.0.0
 */
export const execState = T.execState;
/**
 * Get the current state
 *
 * @since 2.0.0
 */
export const get = T.get;
/**
 * Set the state
 *
 * @since 2.0.0
 */
export const put = T.put;
/**
 * Modify the state by applying a function to the current state
 *
 * @since 2.0.0
 */
export const modify = T.modify;
/**
 * Get a value which depends on the current state
 *
 * @since 2.0.0
 */
export const gets = T.gets;
/**
 * @since 2.0.0
 */
export const of = T.of;
/**
 * @since 2.0.0
 */
export const state = {
    URI,
    map: T.map,
    of,
    ap: T.ap,
    chain: T.chain
};
const { ap, apFirst, apSecond, chain, chainFirst, flatten, map } = pipeable(state);
export { 
/**
 * @since 2.0.0
 */
ap, 
/**
 * @since 2.0.0
 */
apFirst, 
/**
 * @since 2.0.0
 */
apSecond, 
/**
 * @since 2.0.0
 */
chain, 
/**
 * @since 2.0.0
 */
chainFirst, 
/**
 * @since 2.0.0
 */
flatten, 
/**
 * @since 2.0.0
 */
map };
