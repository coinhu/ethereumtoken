import { bimap, both, fold, left, map, mapLeft, right, swap, toTuple } from './These';
export function getTheseM(M) {
    function mapT(fa, f) {
        return M.map(fa, map(f));
    }
    function of(a) {
        return M.of(right(a));
    }
    function leftT(e) {
        return M.of(left(e));
    }
    return {
        map: mapT,
        bimap: (fa, f, g) => M.map(fa, bimap(f, g)),
        mapLeft: (fa, f) => M.map(fa, mapLeft(f)),
        fold: (fa, onLeft, onRight, onBoth) => M.chain(fa, fold(onLeft, onRight, onBoth)),
        swap: fa => M.map(fa, swap),
        rightM: ma => M.map(ma, right),
        leftM: me => M.map(me, left),
        left: leftT,
        right: of,
        both: (e, a) => M.of(both(e, a)),
        toTuple: (fa, e, a) => M.map(fa, toTuple(e, a)),
        getMonad: (E) => {
            function chain(fa, f) {
                return M.chain(fa, fold(leftT, f, (e1, a) => M.map(f(a), fold(e2 => left(E.concat(e1, e2)), right, (e2, b) => both(E.concat(e1, e2), b)))));
            }
            return {
                _E: undefined,
                map: mapT,
                of,
                ap: (mab, ma) => chain(mab, f => mapT(ma, f)),
                chain
            };
        }
    };
}
