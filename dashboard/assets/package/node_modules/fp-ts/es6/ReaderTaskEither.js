import { pipe, pipeable } from './pipeable';
import { getSemigroup as getReaderSemigroup } from './Reader';
import { getReaderM } from './ReaderT';
import { readerTask } from './ReaderTask';
import * as TE from './TaskEither';
import { getValidationM } from './ValidationT';
const T = getReaderM(TE.taskEither);
/**
 * @since 2.0.0
 */
export const URI = 'ReaderTaskEither';
/**
 * @since 2.0.0
 */
export function run(ma, r) {
    return ma(r)();
}
/**
 * @since 2.0.0
 */
export function left(e) {
    return fromTaskEither(TE.left(e));
}
/**
 * @since 2.0.0
 */
export const right = T.of;
/**
 * @since 2.0.0
 */
export function rightTask(ma) {
    return fromTaskEither(TE.rightTask(ma));
}
/**
 * @since 2.0.0
 */
export function leftTask(me) {
    return fromTaskEither(TE.leftTask(me));
}
/**
 * @since 2.0.0
 */
export const fromTaskEither = T.fromM;
/**
 * @since 2.0.0
 */
export const rightReader = T.fromReader;
/**
 * @since 2.0.0
 */
export function leftReader(me) {
    return r => TE.left(me(r));
}
/**
 * @since 2.0.0
 */
export function fromIOEither(ma) {
    return fromTaskEither(TE.fromIOEither(ma));
}
/**
 * @since 2.0.0
 */
export function fromReaderEither(ma) {
    return r => TE.fromEither(ma(r));
}
/**
 * @since 2.0.0
 */
export function rightIO(ma) {
    return fromTaskEither(TE.rightIO(ma));
}
/**
 * @since 2.0.0
 */
export function leftIO(me) {
    return fromTaskEither(TE.leftIO(me));
}
/**
 * @since 2.0.0
 */
export function fold(onLeft, onRight) {
    return ma => r => pipe(ma(r), TE.fold(e => onLeft(e)(r), a => onRight(a)(r)));
}
/**
 * @since 2.0.0
 */
export function getOrElse(onLeft) {
    return ma => r => TE.getOrElse(e => onLeft(e)(r))(ma(r));
}
/**
 * @since 2.0.0
 */
export function orElse(onLeft) {
    return ma => r => TE.orElse(e => onLeft(e)(r))(ma(r));
}
/**
 * @since 2.0.0
 */
export function swap(ma) {
    return e => TE.swap(ma(e));
}
/**
 * @since 2.0.0
 */
export function getSemigroup(S) {
    return getReaderSemigroup(TE.getSemigroup(S));
}
/**
 * @since 2.0.0
 */
export function getApplySemigroup(S) {
    return getReaderSemigroup(TE.getApplySemigroup(S));
}
/**
 * @since 2.0.0
 */
export function getApplyMonoid(M) {
    return {
        concat: getApplySemigroup(M).concat,
        empty: right(M.empty)
    };
}
/**
 * @since 2.0.0
 */
export const ask = T.ask;
/**
 * @since 2.0.0
 */
export const asks = T.asks;
/**
 * @since 2.0.0
 */
export function local(f) {
    return ma => T.local(ma, f);
}
/**
 * Make sure that a resource is cleaned up in the event of an exception (*). The release action is called regardless of
 * whether the body action throws (*) or returns.
 *
 * (*) i.e. returns a `Left`
 *
 * @since 2.0.4
 */
export function bracket(aquire, use, release) {
    return r => TE.bracket(aquire(r), a => use(a)(r), (a, e) => release(a, e)(r));
}
/**
 * @since 2.3.0
 */
export function getReaderTaskValidation(S) {
    const T = getValidationM(S, readerTask);
    return Object.assign({ URI, _E: undefined, fromIO: readerTaskEither.fromIO, fromTask: readerTaskEither.fromTask, throwError: readerTaskEither.throwError, bimap: (ma, f, g) => e => TE.taskEither.bimap(ma(e), f, g), mapLeft: (ma, f) => e => TE.taskEither.mapLeft(ma(e), f) }, T);
}
/**
 * @since 2.4.0
 */
export function fromEitherK(f) {
    return (...a) => fromEither(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainEitherK(f) {
    return chain(fromEitherK(f));
}
/**
 * @since 2.4.0
 */
export function fromIOEitherK(f) {
    return (...a) => fromIOEither(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainIOEitherK(f) {
    return chain(fromIOEitherK(f));
}
/**
 * @since 2.4.0
 */
export function fromTaskEitherK(f) {
    return (...a) => fromTaskEither(f(...a));
}
/**
 * @since 2.4.0
 */
export function chainTaskEitherK(f) {
    return chain(fromTaskEitherK(f));
}
/**
 * @since 2.0.0
 */
export const readerTaskEither = {
    URI,
    map: T.map,
    of: right,
    ap: T.ap,
    chain: T.chain,
    alt: (fx, fy) => r => TE.taskEither.alt(fx(r), () => fy()(r)),
    bimap: (ma, f, g) => e => TE.taskEither.bimap(ma(e), f, g),
    mapLeft: (ma, f) => e => TE.taskEither.mapLeft(ma(e), f),
    fromIO: rightIO,
    fromTask: rightTask,
    throwError: left
};
/**
 * Like `readerTaskEither` but `ap` is sequential
 * @since 2.0.0
 */
export const readerTaskEitherSeq = Object.assign(Object.assign({}, readerTaskEither), { ap: (mab, ma) => T.chain(mab, f => T.map(ma, f)) });
const { alt, ap, apFirst, apSecond, bimap, chain, chainFirst, flatten, map, mapLeft, fromOption, fromEither, fromPredicate, filterOrElse } = pipeable(readerTaskEither);
export { 
/**
 * @since 2.0.0
 */
alt, 
/**
 * @since 2.0.0
 */
ap, 
/**
 * @since 2.0.0
 */
apFirst, 
/**
 * @since 2.0.0
 */
apSecond, 
/**
 * @since 2.0.0
 */
bimap, 
/**
 * @since 2.0.0
 */
chain, 
/**
 * @since 2.0.0
 */
chainFirst, 
/**
 * @since 2.0.0
 */
flatten, 
/**
 * @since 2.0.0
 */
map, 
/**
 * @since 2.0.0
 */
mapLeft, 
/**
 * @since 2.0.0
 */
fromOption, 
/**
 * @since 2.0.0
 */
fromEither, 
/**
 * @since 2.0.0
 */
fromPredicate, 
/**
 * @since 2.0.0
 */
filterOrElse };
